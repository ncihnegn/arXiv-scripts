#!/usr/bin/env python3

import argparse
import glob
import gzip
import os
from pathlib import Path
import platform
import re
import subprocess
import tarfile
import urllib.error
import urllib.request

def filetype(file):
    header = Path(file).read_bytes()[0:4]
    if header == b'%PDF':
        return 'pdf'
    if header[0:-1] == b'%PS':
        return 'ps'
    if header[0:-1] == b'%PS':
        return 'ps'
    if header[0:2] == b'\x1f\x8b':
        return 'gz'
    raise Exception('Unknown file type', file)

def main():
    parser = argparse.ArgumentParser(description='Download and build arXiv papers.')
    parser.add_argument('tag', help='Paper tag')
    parser.add_argument('--compiler', default='pdflatex', help='Use pdflatex or xelatex')
    parser.add_argument('--forcedownload', default=False, help='Force download')
    parser.add_argument('--skipextract', default=False, help='Skip extraction')

    args = parser.parse_args()
    tag = args.tag
    compiler = args.compiler
    skipextract = args.skipextract
    forcedownload = args.forcedownload

    if compiler.endswith('latex'):
        source = 'latex'
    else:
        source = 'tex'

    os.makedirs(tag, exist_ok=True)
    os.chdir(tag)
    # Download sources
    url = 'https://arxiv.org/e-print/' + tag
    archive = tag.split('/')[0]

    if not os.path.exists(archive) or forcedownload:
        try:
            urllib.request.urlretrieve(url, archive)
        except urllib.error.HTTPError as e:
            print(e, url)
            if e.code == 403:
                print('Try DVI')
                try:
                    url = 'https://arxiv.org/dvi/' + tag
                    urllib.request.urlretrieve(url, archive)
                    source = 'dvi'
                except urllib.error.URLError as e:
                    print(e, url)
                    exit(-1)
        except urllib.error.URLError as e:
            print(e, url)
            exit(-1)

    pdf = archive + '.pdf'
    file_type = filetype(archive)
    if file_type == 'pdf':
        os.rename(archive, pdf)
        source = 'pdf'
    if file_type == 'ps':
        ps = archive + '.ps'
        os.rename(archive, ps)
        subprocess.run(['ps2pdf', ps])
        source = 'ps'

    # Extract
    if not skipextract and (source.endswith('tex') or source.endswith('dvi')):
        if file_type == 'gz':
            if tarfile.is_tarfile(archive):
                os.rename(archive, archive + '.tar.gz')
                archive += '.tar.gz'
                tar = tarfile.open(archive)
                tar.extractall()
                tar.close()
            else:
                os.rename(archive, archive + '.gz')
                archive += '.gz'
                subprocess.run(['gzip', '-dNf', archive])

    if source == 'dvi':
        results = glob.glob('*.dvi')
        dvi = results[0]
        pdf = dvi.replace('dvi', 'pdf')
        subprocess.run(['dvipdfmx', dvi])

    if source.endswith('tex'):
        results = []
        if source == 'latex':
            # Find the main file
            for file in glob.glob('*.tex'):
                if re.search('^\\s*\\\\documentclass', Path(file).read_text(errors='ignore'), re.MULTILINE):
                    results.append(file)
            if results == []:
                print("Can't find the main LaTeX file, switch to plain TeX")
                source = 'tex'
                compiler = 'pdftex'
        if source == 'tex':
            results = glob.glob('*.tex')

        if results == []:
            raise Exception("Can't find the main TeX file", glob.glob('*.tex'))

        main = results[0]

        # Build
        subprocess.run(['texliveonfly', '-c', compiler, main])
        command = [compiler, '-halt-on-error', '-shell-escape']
        subprocess.run(command + [main])
        log = Path(main.replace('.tex', '.log'))
        if 'Package inputenc Error: Invalid UTF-8 byte sequence' in log.read_text(errors='ignore'):
            command.append('\\UseRawInputEncoding \\input')
            print(command)
            subprocess.run(command + [main])
        while 'Rerun to' in log.read_text(errors='ignore'):
            subprocess.run(command + [main])
        pdf = main.replace('.tex', '.pdf')

    if platform.system() == 'Darwin':
        subprocess.run(['open', pdf])
    if platform.system() == 'Windows':
        subprocess.run([pdf])
    if platform.system() == 'Linux':
        subprocess.run(['open', pdf])

if __name__ == '__main__':
    main()
